% Leetcode Info
% Jiaxiang Zheng
% \today

This [link](http://leetcode.cloudfoundry.com/) contains the classification of
LeetCode problems. It also contains other informations of those problems.

LinkList
=========
* `002.cpp`
* `019.cpp`
* `023.cpp` --- *to be implemented*
* `092.cpp` --- *to be implemented*


String
=========
* `132.cpp`
* `003.cpp`
* `010.cpp` --- **regular expression variation**
* `125.cpp` 


DP
=========
* `132.cpp`
* `003.cpp`



Integer
==========
* `001.cpp`
* `007.cpp`
* `008.cpp`
* `009.cpp`



Search
==========
* `001.cpp`

Binary Tree
==========
* `099.cpp`            --- *to be finished* 
* `100.cpp`, `101.cpp` --- **symmetric tree or same tree judgement**
* `102.cpp`, `107.cpp` --- **level order traversal** 
* `104.cpp` 
* `105.cpp`, `106.cpp` --- **reconstruct binary tree using inorder and pre(post)-order**



Notes:
==========

1. `007.cpp` be careful about the overflow. If input is 1000000003, the output
might overflow for int number.

2. `008.cpp` implements an `atoi` function, which tell us to think carefully about
all the case. What does all the case mean? 

3. when processing problems about integers, keep in mind about the overflow 
problem.

4. `132.cpp` is not finish yet.

5. `128.cpp` could be solve using **3** methods. **Bitmap, Sort, Hash**.


